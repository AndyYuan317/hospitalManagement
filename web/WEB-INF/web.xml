<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/j2ee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="2.4"
		 xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
	<servlet>
  <servlet-name>Kaptcha</servlet-name>
  <servlet-class>com.google.code.kaptcha.servlet.KaptchaServlet</servlet-class>
  <!--
        For a complete list of Init Parameters, please see:
        http://code.google.com/p/kaptcha/wiki/ConfigParameters
        -->
  <init-param>
   <param-name>kaptcha.border</param-name>
   <param-value>no</param-value>
  </init-param>
  <init-param>
   <param-name>kaptcha.textproducer.font.color</param-name>
   <param-value>black</param-value>
  </init-param>
  <init-param>
   <param-name>kaptcha.textproducer.char.space</param-name>
   <param-value>5</param-value>
  </init-param>
  <init-param>
   <param-name>kaptcha.textproducer.char.length</param-name>
   <param-value>4</param-value>
  </init-param>
  <init-param>
   <param-name>kaptcha.image.width</param-name>
   <param-value>163</param-value>
  </init-param>
 </servlet>

  
  	<listener>   
    <listener-class>com.dispensary.project.utils.SessionCounter</listener-class>   
    </listener> 
	<!-- session超时定义,单位为分钟 -->
	<session-config>
		<session-timeout>40</session-timeout>
	</session-config>
	
	<!-- 默认首页定义 -->
	<welcome-file-list>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>index.html</welcome-file>
	</welcome-file-list>
	
	<!-- Error Page定义 -->
	<error-page>
		<error-code>500</error-code>
		<location>/commons/error.jsp</location>
	</error-page>
	<error-page>
		<error-code>404</error-code>
		<location>/commons/404.jsp</location>
	</error-page>
	<error-page>
		<error-code>403</error-code>
		<location>/commons/403.jsp</location>
	</error-page>
			 
	<!-- Spring ApplicationContext配置文件的路径�,可使用通配符，多个路径用�1,号分隔
	  此参数用于后面的Spring-Context loader -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath*:spring/*.xml</param-value>
	</context-param>
	
	<!-- JSTL i18n定义-->
	<context-param>
		<param-name>javax.servlet.jsp.jstl.fmt.localizationContext</param-name>
		<param-value>i18n/messages</param-value>
	</context-param>
	
	<!-- Character Encoding filter -->
	<filter>
		<filter-name>CharacterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>

	<!-- FlashScope filter,在Flash中存储的数据,在下一次http请求中也可以继续引用,使用方法为Flash.current().error("存在错误"); -->
	<filter>
		<filter-name>FlashFilter</filter-name>
		<filter-class>cn.org.rapid_framework.web.scope.FlashFilter</filter-class>
	</filter>

	<!-- LoggerMDCFilter,存放在MDC中的数据，log4j可以直接引用并作为日志信息打印出来. -->
	<filter>
		<filter-name>LoggerMDCFilter</filter-name>
		<filter-class>javacommon.filter.LoggerMDCFilter</filter-class>
	</filter>
			
	<filter-mapping>
		<filter-name>CharacterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter-mapping>
		<filter-name>FlashFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter-mapping>
		<filter-name>LoggerMDCFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!--Spring ApplicationContext 载入 -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<!-- 使Spring支持request与session的scope,如:<bean id="loginAction" class="com.foo.LoginAction" scope="request"/> -->
	<listener>
	  <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>

	<!-- Spring 刷新Introspector防止内存泄露 -->
	<listener>
		<listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>
	<!-- loginFilter -->
	<filter>
    	<filter-name>loginFilter</filter-name>
    	<filter-class>javacommon.filter.LoginFilter</filter-class>
    </filter>

    <filter-mapping>
    	<filter-name>loginFilter</filter-name>
    	<url-pattern>*.do</url-pattern>
    </filter-mapping>
    <filter-mapping>
    	<filter-name>loginFilter</filter-name>
    	<url-pattern>*.jsp</url-pattern>
    </filter-mapping>
    
	<!--Hibernate Open Session in View Filter-->
	<filter>
		<filter-name>openSessionInViewFilter</filter-name>
		<filter-class>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter</filter-class>
	</filter>
	
	<filter-mapping>
		<filter-name>openSessionInViewFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<filter>
		<filter-name>struts2-cleanup</filter-name>
		<filter-class>org.apache.struts2.dispatcher.ActionContextCleanUp</filter-class>
	</filter>
	<filter>
	      <filter-name>struts2Filter</filter-name>
	      <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
	</filter>
    
    <filter-mapping>
        <filter-name>struts2-cleanup</filter-name>
        <url-pattern>*.do</url-pattern>
    </filter-mapping>		
    <filter-mapping>
        <filter-name>struts2Filter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>   
    
    
</web-app>

